using Arctic.Wrappers;
using UnityEngine;
using VRC;

namespace Arctic.Exploits
{
    class esp
    {
        public static void esprefresh(VRC.Player player)
        {
            if (settings.nconfig.ESP && player != null)
            {
                try
                {
                    if (player.gameObject.transform.Find("SelectRegion"))
                    {
                        {
                            //var Renderer = player.gameObject.transform.Find("SelectRegion").GetComponent<Renderer>();
                            //HighlightsFX.field_Private_Static_HighlightsFX_0.field_Protected_Material_0.color = Color.red;
                            //HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(Renderer, true);
                            foreach (Renderer renderer in player._vrcplayer.field_Internal_GameObject_0.GetComponentsInChildren<Renderer>())
                            {
                                HighlightsFX.prop_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(renderer, settings.nconfig.ESP);
                            }
                        }
                    }
                }
                catch { }
            }
        }

        private static bool inespon;
        public static void espmethod()
        {
            if (Extentions.IsInWorld() && Extentions.LocalPlayer != null)
            {
                try
                {
                    foreach (VRC.Player player in PlayerManager.prop_PlayerManager_0.field_Private_List_1_Player_0.ToArray())
                    {
                        //var Renderer = gameObject.transform.Find("SelectRegion").GetComponent<Renderer>();
                        //HighlightsFX.field_Private_Static_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(Renderer, settings.nconfig.ESP);
                        foreach (Renderer renderer in player._vrcplayer.field_Internal_GameObject_0.GetComponentsInChildren<Renderer>())
                        {
                            HighlightsFX.prop_HighlightsFX_0.Method_Public_Void_Renderer_Boolean_0(renderer, settings.nconfig.ESP);
                        }
                    }
                }
                catch
                {
                }
            }
        }
    }
}
